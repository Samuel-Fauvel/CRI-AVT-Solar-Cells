import math
import colour
import numpy as np
import pandas as pd
from colour.plotting.common import render as render


def isfloat(num):
    try:
        float(num)
        return True
    except ValueError:
        return False


def csv_to_usable(csv_values_raw):
    is_data = isfloat(csv_values_raw[0][0])
    z = 0
    while not is_data:
        f = np.delete(csv_values_raw, [0, z], 0)
        z += 1
        is_data = isfloat(f[0][0])
    spectral_distrib = {}
    i = len(f) - 1
    j = 0
    if float(f[i][0]) > float(f[j][0]):
        while j <= i:
            spectral_distrib[float(f[i][0])] = float(f[i][1])
            j += 1
    elif float(f[i][0]) < float(f[j][0]):
        while i > 0:
            spectral_distrib[float(f[i][0])] = float(f[i][1])
            i -= 1
    return spectral_distrib


def csv_to_transmission(csv_values_raw):
    is_data = isfloat(csv_values_raw[0][0])
    z = 0
    while not is_data:
        f = np.delete(csv_values_raw, [0, z], 0)
        z += 1
        is_data = isfloat(f[0][0])
    spectral_distrib_transmission = {}
    i = len(f) - 1
    j = 0
    if float(f[i][0]) > float(f[j][0]):
        while j <= i:
            k = -float(f[i][1])
            l = math.pow(10, k)
            spectral_distrib_transmission[float(f[i][0])] = float(k)
            j += 1
    elif float(f[i][0]) < float(f[j][0]):
        while i > 0:
            m = -float(f[i][1])
            n = math.pow(10, m)
            spectral_distrib_transmission[float(f[i][0])] = float(n)
            i -= 1
    return spectral_distrib_transmission


def sd_to_csv(sd, title):
    a = np.asarray(sd.values)
    b = np.asarray(sd.wavelengths)
    data = {'Wavelength': b, 'Absorbance': a}
    c = pd.DataFrame(data=data)
    c.to_csv(title + '.csv', columns=('Wavelength', 'Absorbance'), sep=',', index=False)
    return 0


def sun_filter_400_800(spectre_transmission, sun_400_800):
    spectre_filter = spectre_transmission.interpolate(colour.SpectralShape(400, 800, 1))
    a = np.asarray(spectre_filter.values)
    b = np.asarray(spectre_filter.wavelengths)
    data = {'Wavelength': b, 'Absorbance': a}
    c = pd.DataFrame(data=data)
    d = c.values
    sun_to_filter = sun_400_800
    filtered_sun = {}

    i = 0
    for i in range(len(d)):
        actual_row = d[i]
        transmission_value = actual_row[1]
        actual_wavelength = actual_row[0]
        filtered_value = transmission_value * sun_to_filter[actual_wavelength]
        filtered_sun[actual_wavelength] = filtered_value
        i = + 1

    return filtered_sun


def png_spectrum_400_800(spectre, file_title):
    max_abs = max(spectre.values)
    min_abs = 0
    bonding_box = [400, 800, min_abs, max_abs]
    settings = {
        'filename': file_title,
        'standalone': True,
        'bounding_box': bonding_box,
        "tight_layout": False,
        'title': file_title,
        'x_label': 'Wavelength $\\lambda$ (nm)',
        'y_label': 'Absorbance',
    }
    render(**settings)
    colour.plotting.plot_single_sd(spectre, **settings)
    return 0


def png_transmission_400_800(spectre_transmission, file_title):
    bonding_box = [400, 800, 0, 1]
    settings = {
        'filename': file_title,
        'standalone': True,
        'bounding_box': bonding_box,
        "tight_layout": False,
        'title': file_title,
        'x_label': 'Wavelength $\\lambda$ (nm)',
        'y_label': 'Transmission',
    }
    render(**settings)
    colour.plotting.plot_single_sd(spectre_transmission, **settings)
    return 0


def png_sun_filtered_spectrum(sun_filteredspectrum, file_title):
    max_abs = max(sun_filteredspectrum.values)
    if max_abs <= 1:
        bonding_box = [400, 800, 0, 1]
    else:
        max_abs_margin = max_abs + 0.1
        bonding_box = [400, 800, 0, max_abs_margin]

    settings = {
        'filename': file_title,
        'standalone': True,
        'bounding_box': bonding_box,
        "tight_layout": False,
        'title': file_title,
        'x_label': 'Wavelength $\\lambda$ (nm)',
        'y_label': 'Sunlight transmission through solar cell',
    }
    render(**settings)
    colour.plotting.plot_single_sd(sun_filtered_spectrum, **settings)
    return 0


def png_chromaticity_diagram(spectre, file_title):
    settings = {
        'filename': file_title + " Chromaticity Diagram",
        'standalone': True,
        'title': file_title + " Chromaticity Diagram",
    }
    render(**settings)
    colour.plotting.plot_single_sd(spectre, **settings)
    spectre_msds = colour.MultiSpectralDistributions(spectre)
    colour.plotting.plot_sds_in_chromaticity_diagram_CIE1931(spectre_msds, **settings)
    return 0


def png_color_sample(RGB, title):
    colour_sample = colour.plotting.common.ColourSwatch(RGB, title)

    settings = {
        'filename': title + " Colour Sample",
        'standalone': True,
        'title': title,
    }
    colour.plotting.common.plot_single_colour_swatch(colour_sample, **settings)


def png_CRI_detailed(spectrum, file_title):
    settings = {
        'filename': file_title + " CRI",
        'standalone': True,
        'title': file_title,
    }
    render(**settings)
    colour.plotting.quality.plot_single_sd_colour_rendering_index_bars(spectrum, **settings)


##########

sun_400_800 = {400: 1.1141, 401: 1.1603, 402: 1.2061, 403: 1.1613, 404: 1.1801, 405: 1.1511, 406: 1.1227, 407: 1.1026,
               408: 1.1514, 409: 1.2299, 410: 1.0485, 411: 1.1738, 412: 1.2478, 413: 1.1971, 414: 1.1842, 415: 1.2258,
               416: 1.2624, 417: 1.2312, 418: 1.1777, 419: 1.2258, 420: 1.1232, 421: 1.2757, 422: 1.2583, 423: 1.2184,
               424: 1.2117, 425: 1.2488, 426: 1.2135, 427: 1.1724, 428: 1.1839, 429: 1.0963, 430: 0.87462, 431: 0.79394,
               432: 1.3207, 433: 1.2288, 434: 1.1352, 435: 1.2452, 436: 1.3659, 437: 1.3943, 438: 1.2238, 439: 1.1775,
               440: 1.3499, 441: 1.3313, 442: 1.425, 443: 1.4453, 444: 1.4084, 445: 1.4619, 446: 1.3108, 447: 1.4903,
               448: 1.5081, 449: 1.5045, 450: 1.5595, 451: 1.6173, 452: 1.5482, 453: 1.4297, 454: 1.5335, 455: 1.5224,
               456: 1.5724, 457: 1.5854, 458: 1.5514, 459: 1.5391, 460: 1.5291, 461: 1.5827, 462: 1.5975, 463: 1.6031,
               464: 1.5544, 465: 1.535, 466: 1.5673, 467: 1.4973, 468: 1.5619, 469: 1.5682, 470: 1.5077, 471: 1.5331,
               472: 1.6126, 473: 1.5499, 474: 1.5671, 475: 1.6185, 476: 1.5631, 477: 1.5724, 478: 1.623, 479: 1.5916,
               480: 1.6181, 481: 1.6177, 482: 1.6236, 483: 1.6038, 484: 1.5734, 485: 1.5683, 486: 1.2716, 487: 1.4241,
               488: 1.5413, 489: 1.4519, 490: 1.6224, 491: 1.5595, 492: 1.4869, 493: 1.5903, 494: 1.5525, 495: 1.6485,
               496: 1.5676, 497: 1.5944, 498: 1.5509, 499: 1.5507, 500: 1.5451, 501: 1.4978, 502: 1.4966, 503: 1.5653,
               504: 1.4587, 505: 1.5635, 506: 1.6264, 507: 1.556, 508: 1.5165, 509: 1.5893, 510: 1.5481, 511: 1.5769,
               512: 1.6186, 513: 1.5206, 514: 1.4885, 515: 1.5314, 516: 1.5455, 517: 1.2594, 518: 1.4403, 519: 1.3957,
               520: 1.5236, 521: 1.5346, 522: 1.569, 523: 1.4789, 524: 1.5905, 525: 1.5781, 526: 1.5341, 527: 1.3417,
               528: 1.5357, 529: 1.6071, 530: 1.5446, 531: 1.6292, 532: 1.5998, 533: 1.4286, 534: 1.5302, 535: 1.5535,
               536: 1.6199, 537: 1.4989, 538: 1.5738, 539: 1.5352, 540: 1.4825, 541: 1.4251, 542: 1.5511, 543: 1.5256,
               544: 1.5792, 545: 1.5435, 546: 1.5291, 547: 1.549, 548: 1.5049, 549: 1.552, 550: 1.5399, 551: 1.5382,
               552: 1.5697, 553: 1.525, 554: 1.5549, 555: 1.5634, 556: 1.5366, 557: 1.4988, 558: 1.531, 559: 1.4483,
               560: 1.474, 561: 1.5595, 562: 1.4847, 563: 1.5408, 564: 1.5106, 565: 1.5201, 566: 1.4374, 567: 1.532,
               568: 1.518, 569: 1.4807, 570: 1.4816, 571: 1.4331, 572: 1.5134, 573: 1.5198, 574: 1.5119, 575: 1.4777,
               576: 1.4654, 577: 1.5023, 578: 1.456, 579: 1.477, 580: 1.502, 581: 1.5089, 582: 1.532, 583: 1.5479,
               584: 1.5448, 585: 1.5324, 586: 1.4953, 587: 1.5281, 588: 1.4934, 589: 1.2894, 590: 1.3709, 591: 1.4662,
               592: 1.4354, 593: 1.4561, 594: 1.4491, 595: 1.4308, 596: 1.4745, 597: 1.4788, 598: 1.4607, 599: 1.4606,
               600: 1.4753, 601: 1.4579, 602: 1.436, 603: 1.4664, 604: 1.4921, 605: 1.4895, 606: 1.4822, 607: 1.4911,
               608: 1.4862, 609: 1.4749, 610: 1.4686, 611: 1.4611, 612: 1.4831, 613: 1.4621, 614: 1.4176, 615: 1.4697,
               616: 1.431, 617: 1.4128, 618: 1.4664, 619: 1.4733, 620: 1.4739, 621: 1.4802, 622: 1.4269, 623: 1.4165,
               624: 1.4118, 625: 1.4026, 626: 1.4012, 627: 1.4417, 628: 1.3631, 629: 1.4114, 630: 1.3924, 631: 1.4161,
               632: 1.3638, 633: 1.4508, 634: 1.4284, 635: 1.4458, 636: 1.4128, 637: 1.461, 638: 1.4707, 639: 1.4646,
               640: 1.434, 641: 1.4348, 642: 1.4376, 643: 1.4525, 644: 1.4462, 645: 1.4567, 646: 1.415, 647: 1.4086,
               648: 1.3952, 649: 1.3519, 650: 1.3594, 651: 1.4447, 652: 1.3871, 653: 1.4311, 654: 1.4153, 655: 1.3499,
               656: 1.1851, 657: 1.2393, 658: 1.3855, 659: 1.3905, 660: 1.3992, 661: 1.3933, 662: 1.3819, 663: 1.3844,
               664: 1.3967, 665: 1.4214, 666: 1.4203, 667: 1.4102, 668: 1.415, 669: 1.4394, 670: 1.4196, 671: 1.4169,
               672: 1.3972, 673: 1.4094, 674: 1.4074, 675: 1.3958, 676: 1.412, 677: 1.3991, 678: 1.4066, 679: 1.3947,
               680: 1.3969, 681: 1.3915, 682: 1.3981, 683: 1.383, 684: 1.3739, 685: 1.3748, 686: 1.3438, 687: 0.96824,
               688: 1.1206, 689: 1.1278, 690: 1.1821, 691: 1.2333, 692: 1.2689, 693: 1.2609, 694: 1.2464, 695: 1.2714,
               696: 1.2684, 697: 1.3403, 698: 1.3192, 699: 1.2918, 700: 1.2823, 701: 1.2659, 702: 1.2674, 703: 1.2747,
               704: 1.3078, 705: 1.3214, 706: 1.3144, 707: 1.309, 708: 1.3048, 709: 1.3095, 710: 1.3175, 711: 1.3155,
               712: 1.3071, 713: 1.2918, 714: 1.3029, 715: 1.2587, 716: 1.2716, 717: 1.1071, 718: 1.0296, 719: 0.92318,
               720: 0.9855, 721: 1.0861, 722: 1.2407, 723: 1.1444, 724: 1.0555, 725: 1.038, 726: 1.0813, 727: 1.085,
               728: 1.04, 729: 1.0466, 730: 1.1285, 731: 1.0703, 732: 1.1534, 733: 1.1962, 734: 1.2357, 735: 1.2178,
               736: 1.2059, 737: 1.2039, 738: 1.2269, 739: 1.1905, 740: 1.2195, 741: 1.2148, 742: 1.2153, 743: 1.2405,
               744: 1.2503, 745: 1.2497, 746: 1.247, 747: 1.2477, 748: 1.2401, 749: 1.2357, 750: 1.2341, 751: 1.2286,
               752: 1.233, 753: 1.2266, 754: 1.242, 755: 1.2383, 756: 1.2232, 757: 1.2221, 758: 1.2295, 759: 1.1945,
               760: 0.26604, 761: 0.15396, 762: 0.68766, 763: 0.37952, 764: 0.53878, 765: 0.68601, 766: 0.81461,
               767: 0.97417, 768: 1.1138, 769: 1.1278, 770: 1.1608, 771: 1.1686, 772: 1.1778, 773: 1.1771, 774: 1.1771,
               775: 1.1771, 776: 1.1798, 777: 1.1727, 778: 1.1713, 779: 1.1765, 780: 1.1636, 781: 1.1607, 782: 1.1662,
               783: 1.1614, 784: 1.1536, 785: 1.1586, 786: 1.1592, 787: 1.145, 788: 1.1305, 789: 1.1257, 790: 1.091,
               791: 1.1058, 792: 1.0953, 793: 1.0875, 794: 1.0972, 795: 1.0932, 796: 1.0742, 797: 1.0913, 798: 1.1121,
               799: 1.0905, 800: 1.0725, }
"https://www.nrel.gov/grid/solar-resource/spectra-am1.5.html, AM 1.5 G"

photopic_response_400_800 = {400: 0.0003960000000, 401: 0.0004337147000, 402: 0.0004730240000, 403: 0.0005178760000,
                             404: 0.0005722187000, 405: 0.0006400000000, 406: 0.0007245600000, 407: 0.0008255000000,
                             408: 0.0009411600000, 409: 0.0010698800000, 410: 0.0012100000000, 411: 0.0013620910000,
                             412: 0.0015307520000, 413: 0.0017203680000, 414: 0.0019353230000, 415: 0.0021800000000,
                             416: 0.0024548000000, 417: 0.0027640000000, 418: 0.0031178000000, 419: 0.0035264000000,
                             420: 0.0040000000000, 421: 0.0045462400000, 422: 0.0051593200000, 423: 0.0058292800000,
                             424: 0.0065461600000, 425: 0.0073000000000, 426: 0.0080865070000, 427: 0.0089087200000,
                             428: 0.0097676800000, 429: 0.0106644300000, 430: 0.0116000000000, 431: 0.0125731700000,
                             432: 0.0135827200000, 433: 0.0146296800000, 434: 0.0157150900000, 435: 0.0168400000000,
                             436: 0.0180073600000, 437: 0.0192144800000, 438: 0.0204539200000, 439: 0.0217182400000,
                             440: 0.0230000000000, 441: 0.0242946100000, 442: 0.0256102400000, 443: 0.0269585700000,
                             444: 0.0283512500000, 445: 0.0298000000000, 446: 0.0313108300000, 447: 0.0328836800000,
                             448: 0.0345211200000, 449: 0.0362257100000, 450: 0.0380000000000, 451: 0.0398466700000,
                             452: 0.0417680000000, 453: 0.0437660000000, 454: 0.0458426700000, 455: 0.0480000000000,
                             456: 0.0502436800000, 457: 0.0525730400000, 458: 0.0549805600000, 459: 0.0574587200000,
                             460: 0.0600000000000, 461: 0.0626019700000, 462: 0.0652775200000, 463: 0.0680420800000,
                             464: 0.0709110900000, 465: 0.0739000000000, 466: 0.0770160000000, 467: 0.0802664000000,
                             468: 0.0836668000000, 469: 0.0872328000000, 470: 0.0909800000000, 471: 0.0949175500000,
                             472: 0.0990458400000, 473: 0.1033674000000, 474: 0.1078846000000, 475: 0.1126000000000,
                             476: 0.1175320000000, 477: 0.1226744000000, 478: 0.1279928000000, 479: 0.1334528000000,
                             480: 0.1390200000000, 481: 0.1446764000000, 482: 0.1504693000000, 483: 0.1564619000000,
                             484: 0.1627177000000, 485: 0.1693000000000, 486: 0.1762431000000, 487: 0.1835581000000,
                             488: 0.1912735000000, 489: 0.1994180000000, 490: 0.2080200000000, 491: 0.2171199000000,
                             492: 0.2267345000000, 493: 0.2368571000000, 494: 0.2474812000000, 495: 0.2586000000000,
                             496: 0.2701849000000, 497: 0.2822939000000, 498: 0.2950505000000, 499: 0.3085780000000,
                             500: 0.3230000000000, 501: 0.3384021000000, 502: 0.3546858000000, 503: 0.3716986000000,
                             504: 0.3892875000000, 505: 0.4073000000000, 506: 0.4256299000000, 507: 0.4443096000000,
                             508: 0.4633944000000, 509: 0.4829395000000, 510: 0.5030000000000, 511: 0.5235693000000,
                             512: 0.5445120000000, 513: 0.5656900000000, 514: 0.5869653000000, 515: 0.6082000000000,
                             516: 0.6293456000000, 517: 0.6503068000000, 518: 0.6708752000000, 519: 0.6908424000000,
                             520: 0.7100000000000, 521: 0.7281852000000, 522: 0.7454636000000, 523: 0.7619694000000,
                             524: 0.7778368000000, 525: 0.7932000000000, 526: 0.8081104000000, 527: 0.8224962000000,
                             528: 0.8363068000000, 529: 0.8494916000000, 530: 0.8620000000000, 531: 0.8738108000000,
                             532: 0.8849624000000, 533: 0.8954936000000, 534: 0.9054432000000, 535: 0.9148501000000,
                             536: 0.9237348000000, 537: 0.9320924000000, 538: 0.9399226000000, 539: 0.9472252000000,
                             540: 0.9540000000000, 541: 0.9602561000000, 542: 0.9660074000000, 543: 0.9712606000000,
                             544: 0.9760225000000, 545: 0.9803000000000, 546: 0.9840924000000, 547: 0.9874182000000,
                             548: 0.9903128000000, 549: 0.9928116000000, 550: 0.9949501000000, 551: 0.9967108000000,
                             552: 0.9980983000000, 553: 0.9991120000000, 554: 0.9997482000000, 555: 1.0000000000000,
                             556: 0.9998567000000, 557: 0.9993046000000, 558: 0.9983255000000, 559: 0.9968987000000,
                             560: 0.9950000000000, 561: 0.9926005000000, 562: 0.9897426000000, 563: 0.9864444000000,
                             564: 0.9827241000000, 565: 0.9786000000000, 566: 0.9740837000000, 567: 0.9691712000000,
                             568: 0.9638568000000, 569: 0.9581349000000, 570: 0.9520000000000, 571: 0.9454504000000,
                             572: 0.9384992000000, 573: 0.9311628000000, 574: 0.9234576000000, 575: 0.9154000000000,
                             576: 0.9070064000000, 577: 0.8982772000000, 578: 0.8892048000000, 579: 0.8797816000000,
                             580: 0.8700000000000, 581: 0.8598613000000, 582: 0.8493920000000, 583: 0.8386220000000,
                             584: 0.8275813000000, 585: 0.8163000000000, 586: 0.8047947000000, 587: 0.7930820000000,
                             588: 0.7811920000000, 589: 0.7691547000000, 590: 0.7570000000000, 591: 0.7447541000000,
                             592: 0.7324224000000, 593: 0.7200036000000, 594: 0.7074965000000, 595: 0.6949000000000,
                             596: 0.6822192000000, 597: 0.6694716000000, 598: 0.6566744000000, 599: 0.6438448000000,
                             600: 0.6310000000000, 601: 0.6181555000000, 602: 0.6053144000000, 603: 0.5924756000000,
                             604: 0.5796379000000, 605: 0.5668000000000, 606: 0.5539611000000, 607: 0.5411372000000,
                             608: 0.5283528000000, 609: 0.5156323000000, 610: 0.5030000000000, 611: 0.4904688000000,
                             612: 0.4780304000000, 613: 0.4656776000000, 614: 0.4534032000000, 615: 0.4412000000000,
                             616: 0.4290800000000, 617: 0.4170360000000, 618: 0.4050320000000, 619: 0.3930320000000,
                             620: 0.3810000000000, 621: 0.3689184000000, 622: 0.3568272000000, 623: 0.3447768000000,
                             624: 0.3328176000000, 625: 0.3210000000000, 626: 0.3093381000000, 627: 0.2978504000000,
                             628: 0.2865936000000, 629: 0.2756245000000, 630: 0.2650000000000, 631: 0.2547632000000,
                             632: 0.2448896000000, 633: 0.2353344000000, 634: 0.2260528000000, 635: 0.2170000000000,
                             636: 0.2081616000000, 637: 0.1995488000000, 638: 0.1911552000000, 639: 0.1829744000000,
                             640: 0.1750000000000, 641: 0.1672235000000, 642: 0.1596464000000, 643: 0.1522776000000,
                             644: 0.1451259000000, 645: 0.1382000000000, 646: 0.1315003000000, 647: 0.1250248000000,
                             648: 0.1187792000000, 649: 0.1127691000000, 650: 0.1070000000000, 651: 0.1014762000000,
                             652: 0.0961886400000, 653: 0.0911229600000, 654: 0.0862648500000, 655: 0.0816000000000,
                             656: 0.0771206400000, 657: 0.0728255200000, 658: 0.0687100800000, 659: 0.0647697600000,
                             660: 0.0610000000000, 661: 0.0573962100000, 662: 0.0539550400000, 663: 0.0506737600000,
                             664: 0.0475496500000, 665: 0.0445800000000, 666: 0.0417587200000, 667: 0.0390849600000,
                             668: 0.0365638400000, 669: 0.0342004800000, 670: 0.0320000000000, 671: 0.0299626100000,
                             672: 0.0280766400000, 673: 0.0263293600000, 674: 0.0247080500000, 675: 0.0232000000000,
                             676: 0.0218007700000, 677: 0.0205011200000, 678: 0.0192810800000, 679: 0.0181206900000,
                             680: 0.0170000000000, 681: 0.0159037900000, 682: 0.0148371800000, 683: 0.0138106800000,
                             684: 0.0128347800000, 685: 0.0119200000000, 686: 0.0110683100000, 687: 0.0102733900000,
                             688: 0.0095333110000, 689: 0.0088461570000, 690: 0.0082100000000, 691: 0.0076237810000,
                             692: 0.0070854240000, 693: 0.0065914760000, 694: 0.0061384850000, 695: 0.0057230000000,
                             696: 0.0053430590000, 697: 0.0049957960000, 698: 0.0046764040000, 699: 0.0043800750000,
                             700: 0.0041020000000, 701: 0.0038384530000, 702: 0.0035890990000, 703: 0.0033542190000,
                             704: 0.0031340930000, 705: 0.0029290000000, 706: 0.0027381390000, 707: 0.0025598760000,
                             708: 0.0023932440000, 709: 0.0022372750000, 710: 0.0020910000000, 711: 0.0019535870000,
                             712: 0.0018245800000, 713: 0.0017035800000, 714: 0.0015901870000, 715: 0.0014840000000,
                             716: 0.0013844960000, 717: 0.0012912680000, 718: 0.0012040920000, 719: 0.0011227440000,
                             720: 0.0010470000000, 721: 0.0009765896000, 722: 0.0009111088000, 723: 0.0008501332000,
                             724: 0.0007932384000, 725: 0.0007400000000, 726: 0.0006900827000, 727: 0.0006433100000,
                             728: 0.0005994960000, 729: 0.0005584547000, 730: 0.0005200000000, 731: 0.0004839136000,
                             732: 0.0004500528000, 733: 0.0004183452000, 734: 0.0003887184000, 735: 0.0003611000000,
                             736: 0.0003353835000, 737: 0.0003114404000, 738: 0.0002891656000, 739: 0.0002684539000,
                             740: 0.0002492000000, 741: 0.0002313019000, 742: 0.0002146856000, 743: 0.0001992884000,
                             744: 0.0001850475000, 745: 0.0001719000000, 746: 0.0001597781000, 747: 0.0001486044000,
                             748: 0.0001383016000, 749: 0.0001287925000, 750: 0.0001200000000, 751: 0.0001118595000,
                             752: 0.0001043224000, 753: 0.0000973356000, 754: 0.0000908458700, 755: 0.0000848000000,
                             756: 0.0000791466700, 757: 0.0000738580000, 758: 0.0000689160000, 759: 0.0000643026700,
                             760: 0.0000600000000, 761: 0.0000559818700, 762: 0.0000522256000, 763: 0.0000487184000,
                             764: 0.0000454474700, 765: 0.0000424000000, 766: 0.0000395610400, 767: 0.0000369151200,
                             768: 0.0000344486800, 769: 0.0000321481600, 770: 0.0000300000000, 771: 0.0000279912500,
                             772: 0.0000261135600, 773: 0.0000243602400, 774: 0.0000227246100, 775: 0.0000212000000,
                             776: 0.0000197785500, 777: 0.0000184528500, 778: 0.0000172168700, 779: 0.0000160645900,
                             780: 0.0000149900000, 781: 0.0000139872800, 782: 0.0000130515500, 783: 0.0000121781800,
                             784: 0.0000113625400, 785: 0.0000106000000, 786: 0.0000098858770, 787: 0.0000092173040,
                             788: 0.0000085923620, 789: 0.0000080091330, 790: 0.0000074657000, 791: 0.0000069595670,
                             792: 0.0000064879950, 793: 0.0000060486990, 794: 0.0000056393960, 795: 0.0000052578000,
                             796: 0.0000049017710, 797: 0.0000045697200, 798: 0.0000042601940, 799: 0.0000039717390,
                             800: 0.0000037029000, }
"https://cie.co.at/datatable/cie-spectral-luminous-efficiency-photopic-vision, Photopic response"

##########

"Extract the data from the csv file (spectrum.csv)"

csv = pd.read_csv("spectrum.csv")
title = csv.columns[0]
title_transmission = title + " - Transmission"
title_normalized = title + " - Normalized"
title_sun = title + " + solar irradiation"
csv_values_raw = csv.values
csv_sd = csv_to_usable(csv_values_raw)

"Transform the csv absorbance to transmission data"

csv_sd_transmission = csv_to_transmission(csv_values_raw)
spectre_raw_transmission = colour.SpectralDistribution(csv_sd_transmission, name=title_transmission)
spectre_raw_transmission_copy = spectre_raw_transmission.copy()
spectre_temp_transmission = spectre_raw_transmission_copy.interpolate(colour.SpectralShape(400, 800, 1))
spectre_transmission = spectre_temp_transmission.copy().extrapolate(colour.SpectralShape(400, 800, 1),
                                                                    extrapolator_kwargs={'method': 'Constant', })

"Transform the transmission data to sun filtered light"
sun_filtered_spectrum_data = sun_filter_400_800(spectre_transmission, sun_400_800)
sun_filtered_spectrum = colour.SpectralDistribution(sun_filtered_spectrum_data, name=title_sun)

"Transform the raw absorbance data into usable SpectralDistribution class"

spectre_raw = colour.SpectralDistribution(csv_sd, name=title)
spectre_raw_copy = spectre_raw.copy()
spectre_temp = spectre_raw_copy.interpolate(colour.SpectralShape(400, 800, 1))
spectre = spectre_temp.copy().extrapolate(colour.SpectralShape(400, 800, 1),
                                          extrapolator_kwargs={'method': 'Constant', })
spectre_norma = spectre.copy().normalise()

"AVT calculation from 400 to 750 nm"

spectre_transmission_AVT = spectre_transmission.copy()

spectre_AVT_abs = spectre_transmission_AVT.interpolate(colour.SpectralShape(400, 750, 1))
AVT_spectre_values = np.asarray(spectre_AVT_abs.values)
AVT_spectre_wavelengths = np.asarray(spectre_AVT_abs.wavelengths)
data = {'Wavelength': AVT_spectre_wavelengths, 'Transmission': AVT_spectre_values}
AVT_array = pd.DataFrame(data=data)
AVT_data = AVT_array.values

i = 0
AVT_cumul_1 = 0
AVT_cumul_2 = 0
for i in range(len(AVT_data)):
    actual_row = AVT_data[i]
    actual_wavelength = actual_row[0]
    transmission_value = actual_row[1]
    sun_value = sun_400_800[actual_wavelength]
    photopic_response_value = photopic_response_400_800[actual_wavelength]

    AVT_cumul_1 = AVT_cumul_1 + (transmission_value * sun_value * photopic_response_value)
    AVT_cumul_2 = AVT_cumul_2 + (sun_value * photopic_response_value)

    i = + 1

AVT = AVT_cumul_1 / AVT_cumul_2

"Transform transmission spectrum to XYZ, xy and RGB"
XYZ = colour.colorimetry.tristimulus_values.sd_to_XYZ(sun_filtered_spectrum)
xy = colour.models.cie_xyy.XYZ_to_xy(XYZ)
RGB = colour.models.rgb.common.XYZ_to_sRGB(XYZ)

"Create a png file with a colour sample"
png_color_sample(RGB, title)

"Create a png file with the chromaticity diagram"
png_chromaticity_diagram(spectre_transmission, title_transmission)
png_chromaticity_diagram(sun_filtered_spectrum, title_sun)

"Calculate the CRI value"
CRI = colour.colour_rendering_index(sun_filtered_spectrum)

"Create a txt file with the CRI value, the AVT value, the XYZ coordinates, the xy coordinates and the RGB values"

text = "CRI = " + str(CRI) + "\nAVT (from 400 to 750 nm) = " + str(AVT) \
       + "\n\nXYZ coordinates :\n" + "X=" + str(XYZ[0]) + " Y=" + str(XYZ[1]) + " Z=" + str(XYZ[2]) \
       + "\n\nxy coordinates :\n" + "x=" + str(xy[0]) + " y=" + str(xy[1]) \
       + "\n\nRGB values :\n" + "R=" + str(RGB[0]) + " G=" + str(RGB[1]) + " B=" + str(RGB[2])
name_note = 'CRI-AVT and coordinate values ' + title
note = open(name_note, "w")
note.write(text)
note.close()

"Create png files with the absorbance and transmission spectra from 400 to 800 nm"

png_spectrum_400_800(spectre, title)
png_transmission_400_800(spectre_transmission, title_transmission)
png_sun_filtered_spectrum(sun_filtered_spectrum, title_sun)

"Create a png file with the detailed CRI values"

png_CRI_detailed(sun_filtered_spectrum, title)

"Create csv files with treated data of the spectrum"

sd_to_csv(spectre, title)
sd_to_csv(spectre_norma, title_normalized)
sd_to_csv(spectre_transmission, title_transmission)
sd_to_csv(sun_filtered_spectrum, title_sun)
